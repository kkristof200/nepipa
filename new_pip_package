#!/usr/bin/env python3


# IMPORTS
from typing import Optional
import os


# DEFINES
MIN_PYTHON_VERSION = 3.5
MAX_PYTHON_VERSION = 3.7
README_FILE_NAME = 'README.md'


# FUNCTIONS
def sh(cmd):
    import subprocess

    return subprocess.getstatusoutput(cmd)

def get_arg_from_file(path: str, splitter: str) -> Optional[str]:
    if not os.path.exists(path):
        return None
    
    try:
        with open(path, 'r') as f:
            for line in f.readlines():
                if splitter in line:
                    return line.split(splitter)[1].strip()
    except Exception as e:
        print(e)
        return None
    
    return None

def get_git_username() -> Optional[str]:
    home_dir = sh('echo $HOME')[1].strip()
    global_gitconfig_path = os.path.join(home_dir, '.gitconfig')
    local_gitconfig_path = os.path.join(os.getcwd(), '.git/config')
    splitter = 'name = '

    return get_arg_from_file(local_gitconfig_path, splitter) or get_arg_from_file(global_gitconfig_path, splitter)

def get_git_url() -> Optional[str]:
    local_gitconfig_path = os.path.join(os.getcwd(), '.git/config')
    splitter = 'url = '

    url = get_arg_from_file(local_gitconfig_path, splitter)

    if url is None:
        return None
    
    return url.replace('.git', '').strip('/')


# FLOW
input('Current path: ' + os.getcwd() + '\nPlease ensure you\'re in the correct folder ')
setuppy_path = os.path.join(os.getcwd(), 'setup.py')
if os.path.exists(setuppy_path):
    resp = input('setup.py already exists, this will overwrite it. Press \'y\' to proceed: ')

    if resp.lower() != 'y':
        exit(0)

git_username = get_git_username()
git_url = get_git_url()
repo_name = git_url.split('/')[-1]

tab = '    '
setuppy = 'import setuptools, os\n\n'

user_defined_package_name = input('Suggested package name: ' + repo_name + '\n\nIf you wish to override package name enter here, or just simply press enter, to leave the default value: ')

if len(user_defined_package_name) == 0:
    user_defined_package_name = repo_name

readme_file_path = os.path.join(os.getcwd(), README_FILE_NAME)
has_readme = os.path.exists(readme_file_path)

# README
if has_readme:
    with open(readme_file_path, 'r') as f:
        readme = f.read().replace('#', '').strip()

        if readme == repo_name or readme == user_defined_package_name:
            has_readme = False

if not has_readme:
    _version = MIN_PYTHON_VERSION
    _version_str = ''
    
    while _version <= MAX_PYTHON_VERSION:
        if len(_version_str) > 0:
            _version_str += '%20|'
        
        _version_str += str(_version)
        _version += 0.1

    readme = '# ' + user_defined_package_name
    readme += '\n' + '![python_version](https://img.shields.io/static/v1?label=Python&message=' + _version + '&color=blue)'
    readme += '[![PyPI downloads/month](https://img.shields.io/pypi/dm/' + user_defined_package_name + '?logo=pypi&logoColor=white)](https://pypi.python.org/pypi/' + user_defined_package_name + ')'

    description = input('Enter description of package: ')
    readme += '\n\n' + '## Description' + '\n' + description + '\n'
    
    readme += '\n' + '## Install'
    readme += '\n' + '~~~~bash'
    readme += '\n' + 'pip install ' + user_defined_package_name
    readme += '\n' + '# or'
    readme += '\n' + 'pip3 install ' + user_defined_package_name
    readme += '\n' + '~~~~'

    # UNCOMMENT TO ADD USAGE IN README
    # readme += '\n\n' + '## Usage' + '\nFILL_IN' + '\n'

    with open(readme_file_path, 'w') as f:
        f.write(readme)

# SETUP.PY
setuppy += 'if os.path.exists(os.path.join(os.getcwd(), ' + README_FILE_NAME + ')):'
setuppy += '\n' + tab + 'with open("README.md", "r") as f:'
setuppy += '\n' + tab*2 + 'long_description = f.read()'
setuppy += '\n' + tab + 'else:'
setuppy += '\n' + tab*2 + 'long_description = \'' + repo_name + '\''

setuppy += 'setuptools.setup('
setuppy += '\n' + tab + 'name="' + repo_name + '",'
setuppy += '\n' + tab + 'version="0.0.1",'
setuppy += '\n' + tab + 'author="' + git_username + '",'
setuppy += '\n' + tab + 'description="' + repo_name + '",'

setuppy += '\n' + tab + 'long_description=long_description,'
setuppy += '\n' + tab + 'long_description_content_type="text/markdown",'
setuppy += '\n' + tab + 'url="' + git_url + '",'
setuppy += '\n' + tab + 'packages=setuptools.find_packages(),'
setuppy += '\n' + tab + 'install_requires=[],'
setuppy += '\n' + tab + 'classifiers=['
setuppy += '\n' + 2*tab + '"Programming Language :: Python :: 3",'
setuppy += '\n' + 2*tab + '"License :: OSI Approved :: MIT License",'
setuppy += '\n' + 2*tab + '"Operating System :: OS Independent",'
setuppy += '\n' + tab + '],'
setuppy += '\n' + tab + 'python_requires=\'>=' + str(MIN_PYTHON_VERSION) + '\','
setuppy += '\n)'

with open(setuppy_path, 'w') as f:
    f.write(setuppy)

package_path = os.path.join(os.getcwd(), repo_name)
initpy_path = os.path.join(package_path, '__init__.py')
os.makedirs(os.path.join(os.getcwd(), repo_name), exist_ok = True)

if not os.path.exists(initpy_path):
    open(initpy_path, 'a').close()